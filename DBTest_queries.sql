SELECT * FROM PERSON;

SELECT * FROM PERSON LIMIT 100;

SELECT * FROM PERSON OFFSET 5 LIMIT 100; --Starts from ID 6 ends in ID 105

SELECT * FROM PERSON OFFSET 5 FETCH FIRST 100 ROWS ONLY; -- Starts from ID 6 with a top of 100 more (ends in 105)

SELECT * FROM PERSON WHERE DATE_OF_BIRTH BETWEEN DATE '2000-01-01' AND DATE '2015-01-01';

SELECT COUNT(*) FROM PERSON;

SELECT FIRST_NAME,LAST_NAME,DATE_OF_BIRTH FROM PERSON WHERE COUNTRY_OF_BIRTH = 'Czech Republic' AND GENDER = 'Female';

SELECT DISTINCT COUNTRY_OF_BIRTH FROM PERSON ORDER BY COUNTRY_OF_BIRTH;

SELECT * FROM PERSON WHERE COUNTRY_OF_BIRTH IN ('Czech Republic','Netherlands','Germany','Switzerland') AND GENDER = 'Female';

SELECT * FROM PERSON WHERE EMAIL LIKE '%.com';

SELECT * FROM PERSON WHERE COUNTRY_OF_BIRTH ILIKE 'P%'; --ILIKE ignores the case (uppercase or lowercase), this is a postgresql directive

SELECT COUNTRY_OF_BIRTH, COUNT(*) FROM PERSON GROUP BY COUNTRY_OF_BIRTH; -- counts how many people are from each country

SELECT COUNTRY_OF_BIRTH, COUNT(*) FROM PERSON HAVING COUNT(*) > 5 GROUP BY COUNTRY_OF_BIRTH;

SELECT MAX(PRICE) FROM CAR;

SELECT MAKE,MODEL,ROUND(MAX(PRICE)) AS TOTAL FROM CAR GROUP BY MAKE,MODEL ORDER BY TOTAL DESC;

SELECT MAKE, SUM(PRICE) FROM CAR GROUP BY MAKE;

SELECT *, ROUND((PRICE * 0.1),2) AS DISCOUNT FROM CAR;

SELECT COALESCE(EMAIL,"Email not found") FROM PERSON;

SELECT COUNT(*) FROM (SELECT COALESCE(EMAIL,'Email not found') AS OUT FROM PERSON) T WHERE OUT = 'Email not found';

SELECT NOW()::DATE;

SELECT NOW()::TIME;

SELECT EXTRACT(YEAR FROM NOW());

SELECT FIRST_NAME,LAST_NAME,GENDER,COUNTRY_OF_BIRTH,DATE_OF_BIRTH,EXTRACT(YEAR FROM (AGE(NOW(),DATE_OF_BIRTH))) AS AGE
FROM PERSON;

--ADD CONSTRAINT
ALTER TABLE PERSON ADD CONSTRAINT GENDER_CONSTRAINT CHECK (GENDER = 'Female' OR GENDER = 'Male');

ALTER TABLE PERSON ADD CAR_ID BIGINT REFERENCES CAR(ID);

SELECT * FROM PERSON JOIN CAR ON PERSON.CAR_ID = CAR.ID;

SELECT * FROM PERSON LEFT JOIN CAR ON PERSON.CAR_ID = CAR.ID;

SELECT * FROM PG_AVAILABLE_EXTENSIONS;

--UUID UNIVERSAL UNIQUE IDENTIFIER
SELECT UUID_GENERATE_V4();